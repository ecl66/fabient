 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/pokemons", type: :request do
  
  # Pokemon. As you add validations to Pokemon, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "Name",
      type_1: "1",
      type_2: "2",
      total: 1,
      hp: 2,
      attack: 3,
      defense: 4,
      sp_atk: 5,
      sp_def: 6,
      speed: 7,
      generation: 8,
      legendary: true
    }
  }

  let(:invalid_attributes) {
    {
      noname: "doesnotexists"
    }
  }

  # describe "GET /index" do
  #   it "renders a successful response" do
  #     Pokemon.create! valid_attributes
  #     get pokemons_url, as: :json
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET /show" do
  #   it "renders a successful response" do
  #     pokemon = Pokemon.create! valid_attributes
  #     get pokemon_url(pokemon), as: :json
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET /new" do
  #   it "renders a successful response" do
  #     get new_pokemon_url, as: :json
  #     expect(response).to be_successful
  #   end
  # end

  # describe "GET /edit" do
  #   it "render a successful response" do
  #     pokemon = Pokemon.create! valid_attributes
  #     get edit_pokemon_url(pokemon), as: :json
  #     expect(response).to be_successful
  #   end
  # end

  describe "POST /create.json" do
    context "with valid parameters" do
      it "creates a new Pokemon" do
        # expect {
          post pokemons_url, params: { pokemon: valid_attributes }, as: :json
          expect(response).to be_successful
        # }.to change(Pokemon, :count).by(1)
      end

      it "redirects to the created pokemon" do
        post pokemons_url, params: { pokemon: valid_attributes }, as: :json
        expect(response).to be_successful #include('"name":"Name"') #redirect_to(pokemon_url(Pokemon.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Pokemon" do
          post pokemons_url, params: { pokemon: invalid_attributes }, as: :json
          expect(response).not_to be_successful
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post pokemons_url, params: { pokemon: invalid_attributes }, as: :json
        
        expect(response).not_to be_successful
      end
    end
  end

  describe "PATCH /update.json" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "NewPok"
        }
      }

      it "updates the requested pokemon" do
        pokemon = Pokemon.create! valid_attributes
        patch pokemon_url(pokemon), params: { pokemon: new_attributes }, as: :json
        expect(response).to be_successful
      end

    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        pokemon = Pokemon.create! valid_attributes
        patch pokemon_url(pokemon), params: { pokemon: invalid_attributes }, as: :json
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy.json" do
    it "destroys the requested pokemon" do
      pokemon = Pokemon.create! valid_attributes
      delete pokemon_url(pokemon), as: :json
      expect(response).to be_successful
    end
  end
end
